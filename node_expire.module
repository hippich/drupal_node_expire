<?php

/**
 * @file
 * Set a timer into your content, allowing you to perform customized actions.
 */

DEFINE('NODE_EXPIRE_FORMAT',     'Y-m-d');
DEFINE('NODE_EXPIRE_FORMAT_JS', 'yy-mm-dd');

/**
 * Implements hook_cron().
 */
function node_expire_cron() {
  $result = db_query('SELECT n.nid FROM {node} n JOIN {node_expire} ne ON n.nid = ne.nid WHERE ne.expire <= :ne_expire',
    array(':ne_expire' => REQUEST_TIME));
  $nids = array();
  foreach ($result as $record) {
    $nids[] = $record->nid;
    node_expire_set_expired($record->nid);
    $node = node_load($record->nid);
    rules_invoke_event('node_expired', $node);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Add expiration options to the node entry forms
 */
function node_expire_form_alter(&$form, &$form_state, $form_id) {
  if ((isset($form['type'])) &&
    (isset($form['type']['#value'])) &&
    ($form['type']['#value'] . '_node_form' == $form_id) &&
    ($ntypes = variable_get('node_expire_ntypes', array())) &&
    (isset($ntypes[$form['type']['#value']])) &&
    ($ntypes = $ntypes[$form['type']['#value']])) {
      module_load_include('nodeapi.inc', 'node_expire');
      _node_expire_form_alter_nodeform($ntypes, $form, $form_state, $form_id);
  }
}

/**
 * Implements hook_form_alter().
 *
 * Enable/Disable expiration feature on node types
 */
function node_expire_form_node_type_form_alter(&$form, &$form_state) {
  if (user_access('administer node expire')) {
    $ntypes = variable_get('node_expire_ntypes', array());
    $ntype  = $form['#node_type']->type;
    $form['workflow']['node_expire'] = array(
      '#title' => t('Default expiration date'),
      '#description' => t('Default date to consider the node expired.') . ' ' . t('Format: PHP <a href="http://www.php.net/strtotime" target="_blank">strtotime format</a>.') . ' ' . t('Leave it blank if this content type never expires.'),
      '#type' => 'textfield',
      '#default_value' => empty($ntypes[$ntype]['default']) ? '' : $ntypes[$ntype]['default'],
    );
    $form['workflow']['node_expire_max'] = array(
      '#title' => t('Expiration date limit'),
      '#description' => t('The max date to consider the node expired.') . ' ' . t('Format: PHP <a href="http://www.php.net/strtotime" target="_blank">strtotime format</a>.') . ' ' . t('Leave it blank if this there is no limit date.'),
      '#type' => 'textfield',
      '#default_value' => empty($ntypes[$ntype]['max']) ? '' : $ntypes[$ntype]['max'],
    );
    $form['workflow']['node_expire_required'] = array(
      '#title' => t('Expiration date required'),
      '#type' => 'checkbox',
      '#default_value' => !empty($ntypes[$ntype]['required']),
    );

    // Add special validate/submit functions
    module_load_include('ntype.inc', 'node_expire');
    $form['#validate'][]  = '_node_expire_form_node_type_form_alter_validate';
    $form['#submit'][]    = '_node_expire_form_node_type_form_alter_submit';
  }
}

/**
 * Implements hook_node_load().
 */
function node_expire_node_load($nodes, $types) {
  module_load_include('nodeapi.inc', 'node_expire');
  _node_expire_node_load($ntypes, $nodes, $types);
}

/**
 * Implements hook_node_prepare().
 */
function node_expire_node_prepare($node) {
  // Only deal with node types that have the Node expire feature enabled
  $ntypes = variable_get('node_expire_ntypes', array());
  if (!isset($ntypes[$node->type])) {
    return;
  }
  if (!$ntypes = $ntypes[$node->type]) {
    return;
  }
  module_load_include('nodeapi.inc', 'node_expire');
  _node_expire_node_prepare($ntypes, $node);
}

/**
 * Implements hook_node_validate().
 */
function node_expire_node_validate($node) {
  // Only deal with node types that have the Node expire feature enabled
  $ntypes = variable_get('node_expire_ntypes', array());
  if (!isset($ntypes[$node->type])) {
    return;
  }
  if (!$ntypes = $ntypes[$node->type]) {
    return;
  }
  module_load_include('nodeapi.inc', 'node_expire');
  _node_expire_node_validate($ntypes, $node);
}

/**
 * Implements hook_nodeapi_update().
 */
function node_expire_node_update($node) {
  // Only deal with node types that have the Node expire feature enabled
  $ntypes = variable_get('node_expire_ntypes', array());
  if (!isset($ntypes[$node->type])) {
    return;
  }
  if (!$ntypes = $ntypes[$node->type]) {
    return;
  }
  module_load_include('nodeapi.inc', 'node_expire');
  _node_expire_node_update_insert($ntypes, $node);
}

/**
 * Implements hook_nodeapi_insert().
 */
function node_expire_node_insert($node) {
  // Only deal with node types that have the Node expire feature enabled
  $ntypes = variable_get('node_expire_ntypes', array());
  if (!isset($ntypes[$node->type])) {
    return;
  }
  if (!$ntypes = $ntypes[$node->type]) {
    return;
  }
  module_load_include('nodeapi.inc', 'node_expire');
  _node_expire_node_update_insert($ntypes, $node);
}

/**
 * Implements hook_nodeapi_delete().
 */
function node_expire_node_delete($node) {
  // Only deal with node types that have the Node expire feature enabled
  $ntypes = variable_get('node_expire_ntypes', array());
  if (!isset($ntypes[$node->type])) {
    return;
  }
  if (!$ntypes = $ntypes[$node->type]) {
    return;
  }
  module_load_include('nodeapi.inc', 'node_expire');
  _node_expire_node_delete($ntypes, $node);
}

/**
 * Implements hook_permission().
 */
function node_expire_permission() {
  return array(
    'administer node expire' => array(
      'title' => t('administer node expire'),
      'description' => t('TODO Add a description for \'administer node expire\''),
    ),
    'edit node expire' => array(
      'title' => t('edit node expire'),
      'description' => t('TODO Add a description for \'edit node expire\''),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function node_expire_views_api() {
  return array(
    'api' => 2,
    'path' => drupal_get_path('module', 'node_expire'),
  );
}

/**
 *
 * @param $nid
 *   node ID that should set the expired flag.
 */
function node_expire_set_expired($nid) {
  db_update('node_expire')
    ->fields(array('expired' => 1,
      'lastnotify' => REQUEST_TIME))
    ->condition('nid', $nid)
    ->condition(db_or()
      ->condition('lastnotify', 0)
      ->condition('expired', 1, '!='))
    ->execute();
}

/*
 * Utility to display debug info.
 *
 * Display debug info and write it into log.
 *
 * @param $data
 *   data to display.
 */
function node_expire_debug($data = array()) {
  drupal_set_message(filter_xss_admin('<pre>' . print_r($data, TRUE) . '</pre>'));
  watchdog('node_expire', '<pre>' . print_r($data, TRUE) . '</pre>');
}
